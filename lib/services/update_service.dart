
import 'dart:convert';
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';

class UpdateService {
  // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ server URL ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶¨‡ßá‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá version.json file ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
  // TODO: version.json file Google Drive ‡¶è upload ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶∞ direct link ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
  // Format: https://drive.google.com/uc?export=download&id=YOUR_FILE_ID
  // Google Drive direct download link for version.json
  static const String versionCheckUrl = 'https://drive.google.com/uc?export=download&id=1oxQFchysFeEO2v8NndD9F0pr1wh6dHEv';
  

  final Dio _dio = Dio();

  /// Check ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® update ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
  Future<UpdateInfo?> checkForUpdate() async {
    try {
      print('üîé UpdateService: Starting update check...');
      print('   URL: $versionCheckUrl');

      // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® app ‡¶è‡¶∞ version info ‡¶®‡ßá‡¶Ø‡¶º‡¶æ
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      final currentBuildNumber = int.parse(packageInfo.buildNumber);

      print('üì± Current app version: $currentVersion (build $currentBuildNumber)');

      // Server ‡¶•‡ßá‡¶ï‡ßá latest version info ‡¶®‡ßá‡¶Ø‡¶º‡¶æ
      print('üåê Fetching version info from server...');
      final response = await _dio.get(
        versionCheckUrl,
        options: Options(
          responseType: ResponseType.json,
          validateStatus: (status) => status! < 500,
        ),
      );
      print('üì° Server response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        print('‚úÖ Response received successfully');
        print('üì¶ Response type: ${response.data.runtimeType}');

        // Parse JSON if it's a string
        dynamic data = response.data;
        if (data is String) {
          print('‚öôÔ∏è Parsing JSON string...');
          data = json.decode(data);
        }
        print('üì¶ Response data: $data');

        final latestVersion = data['version'] as String;
        final latestBuildNumber = data['buildNumber'] as int;
        final apkUrl = data['apkUrl'] as String;
        final releaseNotes = data['releaseNotes'] as String;

        print('üÜï Latest version: $latestVersion (build $latestBuildNumber)');
        print('üîó APK URL: $apkUrl');

        // Check ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá ‡¶®‡¶§‡ßÅ‡¶® version ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
        if (latestBuildNumber > currentBuildNumber) {
          print('üéâ New update available!');
          return UpdateInfo(
            currentVersion: currentVersion,
            latestVersion: latestVersion,
            apkUrl: apkUrl,
            releaseNotes: releaseNotes,
            isUpdateAvailable: true,
          );
        } else {
          print('‚úÖ App is already up to date');
          return UpdateInfo(
            currentVersion: currentVersion,
            latestVersion: latestVersion,
            apkUrl: '',
            releaseNotes: '',
            isUpdateAvailable: false,
          );
        }
      } else {
        print('‚ùå Bad response status: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Update check error: $e');
      print('   Error type: ${e.runtimeType}');
      rethrow;
    }
    return null;
  }

  /// APK download ‡¶ï‡¶∞‡¶æ
  Future<String> downloadApk(
    String url, {
    Function(int, int)? onProgress,
  }) async {
    try {
      print('üì• UpdateService: Starting APK download...');
      print('   Download URL: $url');

      // Download directory ‡¶®‡ßá‡¶Ø‡¶º‡¶æ
      final dir = await getExternalStorageDirectory();
      final filePath = '${dir!.path}/app-update.apk';

      print('üìÇ Download directory: ${dir.path}');
      print('üìÑ File path: $filePath');

      // ‡¶™‡ßÅ‡¶∞‡¶®‡ßã APK delete ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá
      final file = File(filePath);
      if (await file.exists()) {
        print('üóëÔ∏è Deleting old APK file...');
        await file.delete();
        print('‚úÖ Old APK deleted');
      }

      // ‡¶®‡¶§‡ßÅ‡¶® APK download ‡¶ï‡¶∞‡¶æ
      print('‚¨áÔ∏è Starting download...');
      await _dio.download(
        url,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1 && onProgress != null) {
            onProgress(received, total);
          }
        },
      );

      print('‚úÖ Download completed successfully!');
      print('   File size: ${await file.length()} bytes');

      return filePath;
    } catch (e) {
      print('‚ùå Download error: $e');
      print('   Error type: ${e.runtimeType}');
      rethrow;
    }
  }
}

class UpdateInfo {
  final String currentVersion;
  final String latestVersion;
  final String apkUrl;
  final String releaseNotes;
  final bool isUpdateAvailable;

  UpdateInfo({
    required this.currentVersion,
    required this.latestVersion,
    required this.apkUrl,
    required this.releaseNotes,
    required this.isUpdateAvailable,
  });
}
